# This expects a few things
#
# - ag for searching (https://github.com/ggreer/the_silver_searcher)
# - ctags for well tags (https://github.com/universal-ctags/ctags)
# - gocode for code completion (https://github.com/nsf/gocode)
# - goimports for code formatting on save (https://golang.org/x/tools/cmd/goimports)
# - gogetdoc for documentation display and source jump (https://github.com/zmb3/gogetdoc)
# - jq for json deserializaton, required by gogetdoc
 
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <backtab> <c-p>
}
hook global InsertCompletionShow .* %{
    map window insert <tab> <c-n>
    map window insert <backtab> <c-p>
}
hook global WinCreate .* %{
    add-highlighter window/ number_lines -hlcursor
    add-highlighter window/ show_matching
    # default space char doesn't show 
    # add-highlighter window/ show_whitespaces -spc \  -nbsp âˆ™
    add-highlighter window/ wrap -word
}
hook global WinSetOption filetype=go %{
    go-enable-autocomplete
    set window indentwidth 0 # 0 means real tab
    set window formatcmd 'goimports'
    set window lintcmd 'gometalinter .'
    set window makecmd 'go install -v -u .'
    map window goto d <esc>:go-jump<ret> -docstring "Jump to definition"
    map window user k <esc>:go-doc-info<ret> -docstring "Show documentation"
}
hook global WinSetOption filetype=.+ %{
    try %{ addhl regex \<(TODO|FIXME|XXX|NOTE)\> 0:green }
}
hook global BufWritePost .*\.go %{
    go-format -use-goimports
}

set global grepcmd 'rg --column'
set global ui_options ncurses_assistant=none:ncurses_enable_mouse=true:ncurses_set_title=false
set global indentwidth 4
set global scrolloff 5,5

def find -params 1 -shell-candidates %{ ag --nocolor --ignore=vendor --ignore images --ignore svg --ignore fonts -g "" } %{ edit %arg{1} }
def git-edit -params 1 -shell-candidates %{ git ls-files } %{ edit %arg{1} } -docstring "Uses git ls-files to find files"
def fzf-file %{ %sh{
        if [ -z "$TMUX" ]; then
            echo echo only works inside tmux
        else
            FILE=$(ls -1 | fzf-tmux -d 15)
            if [ -n "$FILE" ]; then
                printf 'eval -client %%{%s} edit %%{%s}\n' "${kak_client}" "${FILE}" | kak -p "${kak_session}"
        fi
    fi
}} -docstring 'invoke fzf to open a file' 
def fzf-buffer %{ %sh{
    if [ -z "$TMUX" ]; then
        echo echo only works inside tmux
    else
        BUFFER=$(printf %s\\n "${kak_buflist}" | tr : '\n' | fzf-tmux -d 15)
        if [ -n "$BUFFER" ]; then
            echo "eval -client '$kak_client' 'buffer ${BUFFER}'" | kak -p ${kak_session}
        fi
    fi
}} -docstring 'invoke fzf to select a buffer' 

alias global bd delete-buffer
alias global colo colorscheme
alias global color colorscheme
alias global f find
alias global ge git-edit
alias global qa quit
alias global qa! quit!
alias global wqa write-all-quit
alias global wqa! write-all-quit
alias global wq write-quit
alias global wq! write-quit!

map global normal -docstring "Quick find" -- - %{: find <tab>}
map global goto f "<esc>1s(.+?)\h*$<ret>gf" -docstring "file" 
map global user c %{: comment-line<ret>} -docstring "Comment or uncomment selected lines"
map global user p %{| nc termbin.com 9999<ret>xyuP<a-;>k,c} -docstring "Publish to termbin.com"
map global user t %{: nop %sh{tmux selectp -t +1}<ret>} -docstring "Switch to next tmux window"
map global user T %{: nop %sh{tmux split -v -p 20\; last-pane}<ret>} -docstring "Create new tmux window below"
map global user r %{: prompt %{Run:} %{echo %sh{tmux send-keys -t +1 "$kak_text" Enter }}<ret>} -docstring "Run command in next tmux window"
map global user m %{: mark-word<ret>} -docstring "Mark word with highlight"
map global user M %{: mark-clear<ret>} -docstring "Remove word marking"

colorscheme nofrils-dark
try %{ source .kakrc.local }
